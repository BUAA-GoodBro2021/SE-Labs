<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab01 Git on 软件工程基础上机指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/</link><description>Recent content in Lab01 Git on 软件工程基础上机指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 简易教程</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git/</guid><description>Git 指南 # 本教程涉及命令行指令说明时，[] 表示该参数为可选，&amp;lt;&amp;gt; 仅说明参数意义，需根据实际来定义 Git 简介 # Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理或大或小的项目。利用 git，可以在本地很好地控制项目版本，让项目有条不紊地进行，编写代码错误还能通过回退进行纠正；通过提交、拉取、推送等操作，与队友或同事参与远程共同开发。
为什么我们需要git？试想一下，在面对一个万行级别甚至更高级别的项目时，单个程序员已经很难完成和掌控整个项目。此时扮演对项目进行开发和维护角色的往往是一个多人团队。事实上，无论是开发阶段还是维护阶段，每个人所熟悉的也只是自己负责的那部分代码而已。在团队开发中，每个开发者都在自己负责的部分编写了不同的代码，很多情况下甚至在同一个文件做了不同的修改。如何把大家的汗水与智慧的结晶进行版本管理，综合为一个完整且稳定的项目？在过去，需要分配专门的人员完成这种统筹兼顾的工作。但是现在，以git为代表的分布式版本控制系统出现了。它可以方便的进行分支管理，将不同的开发内容一键合并。也可以让开发者看到项目的每一条分支的提交记录，以获知自己和主分支之间是否存在进度差异；它可以进行强大的版本管理，当开发者发现由于自己的失误导致项目出现了难以弥补的恶性bug，或者是文件管理出现重大事故，git支持开发者以commit为“锚点”进行版本回退，解决旧版本中的隐患或者丢掉新版本的失误；它可以提供图形化的冲突页面，以方便开发者了解自己修改的文件和希望合并、拉取的分支中对应的文件在哪里出现了有待商榷的差异……总之，多人协作的任何代码项目，都离不开以git为代表的分布式版本控制系统。而即将陪伴我们数个学期的软件工程课程，其项目也将建立在git之上。
分布式版本控制系统 在分布式版本控制系统中，系统保存的不是文件变化的差量，而是文件的快照，即把文件的整体复制下来保存，而不关心具体的变化内容。其次，最重要的是该控制系统是分布式的，开发者从中央服务器拷贝下来代码时，拷贝的是一个完整的版本库，包括历史纪录，提交记录等，这样即使某一台机器宕机也能找到文件的完整备份。
Git 安装 # Windows 安装包下载地址： https://gitforwindows.org/
官网慢，可以用国内的镜像： https://npm.taobao.org/mirrors/git-for-windows/
完成安装之后，就可以在 cmd 或 powershell 等命令行工具使用 git 工具了。一般情况下，在某个文件夹点击右键，你可以看到 Git Bash Here，通过这个也可以打开 Git 工具。
MacOS 在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具。
下载地址为： http://sourceforge.net/projects/git-osx-installer/
Linux 尝试在终端输入 git，看看系统有没有安装；没有的话输入以下命令安装：
sudo apt-get install git Git 配置 # Git 提供了一个叫做 git config 的工具，用于配置或读取相应的工作环境变量。这些环境变量决定了 Git 在各个环节的管理员信息和使用方式，存放于 /etc/gitconfig (所有用户生效 –system) 或 ~/.gitconfig (当前用户配置 –global)。</description></item><item><title>Git 指令全集</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git_command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git_command/</guid><description>Git 指令全集 # 仓库 # # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init &amp;lt;project-name&amp;gt; # 下载一个项目和它的整个代码历史 $ git clone &amp;lt;url&amp;gt; 配置 # # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e &amp;lt;--global&amp;gt; # 设置提交代码时的用户信息 $ git config &amp;lt;--global&amp;gt; user.name &amp;#34;&amp;lt;name&amp;gt;&amp;#34; $ git config &amp;lt;--global&amp;gt; user.email &amp;#34;&amp;lt;email address&amp;gt;&amp;#34; 增加/删除文件 # # 添加指定文件到暂存区 $ git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ... # 添加指定目录到暂存区，包括子目录 $ git add &amp;lt;dir&amp;gt; # 添加当前目录的所有文件到暂存区 $ git add .</description></item></channel></rss>