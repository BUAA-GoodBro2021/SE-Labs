<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab02 前后端基础Ⅰ on 软件工程基础上机指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/</link><description>Recent content in Lab02 前后端基础Ⅰ on 软件工程基础上机指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/index.xml" rel="self" type="application/rss+xml"/><item><title>Django入门篇（敬请期待....）</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Django_door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Django_door/</guid><description>Django 入门篇（敬请期待&amp;hellip;.） # 后端的主要功能是，管理数据库、响应前端的请求。例如用户登录，前端需要携带用户名和密码等信息向后端某个路由发送请求，后端则根据用户名查找数据库，验证密码是否正确，并携带结果响应前端。 Django 是一个由 Python 编写的高级 Web 框架，使用框架进行 Web 开发，能避免重复造轮子，而专注于应用程序的业务逻辑。
环境配置 # 我们可以考虑一个小的问题，现在有不同的项目需要在同一个服务器上运行，项目一需要 Python &amp;gt;= 3.8 的环境，因为其中有一个核心的算法模型只支持 3.8 及其以上的 Python 版本，而项目二需要 Python &amp;lt;= 3.7 的环境，因为其中有一个拓展包并没有随着 Python 版本的更新而进行维护，导致 Python 3.7 及其以上的环境不支持该拓展包的使用，那么我们该怎么处理呢。一个很自然的想法就是，我们对于不同的项目，单独给其配置环境就可以了，将两个项目的环境区别开来，互不影响，这样就可以在同一个服务器上进行不同项目的部署了。
给不同项目单独配置的环境叫做虚拟环境，管理虚拟环境的工具叫做 Conda，Conda的种类有很多，比如Anaconda，miniconda等等，上面这两个 Conda 是常用的 Conda，二者区别在于Anaconda自带了很多数据科学计算的包（该虚拟环境已经安装好了比如 NumPy，Panda等包），而miniconda则是一个空的环境。
相比于直接安装 Python 某个版本，我们更推荐安装 Anaconda 管理虚拟环境（miniconda 也可以，这里以 Anaconda 作为例子）。Python 项目的版本和依赖各有千秋，而使用 Anaconda 能针对项目建立虚拟环境，互不干扰且便于管理。
Anaconda下载地址：
官网： https://www.anaconda.com/ 清华镜像： https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/（选择最新版本即可） 安装步骤中注意勾选添加至环境变量中 安装 Anaconda 后，使用 conda 指令新建一个虚拟环境，用于开发 Django 项目：
conda create --name django python=3.8 # 虚拟环境名为django，python版本指定3.8 进入 django 虚拟环境：</description></item></channel></rss>