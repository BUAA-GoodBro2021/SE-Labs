<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab03 前后端基础Ⅱ on 软件工程基础上机指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/</link><description>Recent content in Lab03 前后端基础Ⅱ on 软件工程基础上机指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/index.xml" rel="self" type="application/rss+xml"/><item><title>前端实验指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/frontend_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/frontend_index/</guid><description>Lab03 前端基础 # 实验目的 # 了解 Vue 框架的基本使用 熟悉 Vue CLI 的基础命令 掌握 Vue-Router、Vuex 与 Vue 的集成 掌握 ElementUI 的基础使用 掌握使用 Axios 发送网络请求的方法 熟悉 Vue 单页面组件的使用 资源链接 # https://bhpan.buaa.edu.cn:443/link/3A508B02D5CE20902AE2983009CE5D1B
Valid Until: 2023-07-15 23:59
实验指南 # 查看资源链接中 Vue 和 CSS 相关的内容 完成实验作业并于 3.31 日晚 12 点前提交至 软院云平台 实验作业 # 根据 作业.pdf 中的作业要求完成作业，并将 文档 和 演示视频 打包提交到云平台上。
任务 1 # 使用 Vue CLI 创建一个自己的 Vue 项目，项目至少包含 Vue-Router 和 Vuex，其他依赖项可以自行决定要不要添加。
任务 2 # 在 views 中新建一个单页面组件，将其命名为 Login.</description></item><item><title>后端实验指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/backend_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/backend_index/</guid><description>Lab03 后端进阶 # 前情提醒 # 大家目前接触过的 java 大部分属于 javaSE 部分，而后端框架一般属于 javaEE 部分，javaSE 和 javaEE 二者之间的区别还是很大的，而且 SpringBoot 该框架要求的前置知识较多，因为SprintBoot 是 Spring 全家桶的整合，需要了解 Spring，SpringMVC，MyBatis（MyBatis-plus）三件套的基本知识，同时在面对增删改查的复杂逻辑时需要手写 SQL 语句，所以不太适合后端新手同学使用该框架作为后端框架的入门。
因此该后端实验有很多实验是选做（标红的都是选做——高手可以尝试）部分，不太要求同学们完全掌握这门框架，目前只需要根据教学视频对于该框架有一个初步的了解即可。
如果在SpringBoot上遇到什么问题可以先尝试自己解决（因为Zhoues也不太熟），如果真的遇到的问题，可以请教群里面的SpringBoot大神，当然还是建议花更多的时间在 Django 上！
实验目的 # 学习使用maven管理配置依赖 了解springboot的基础知识，能够自行创建一个springboot项目 了解基础的分层结构 【高手必须掌握的】锻炼解决问题的能力，通过查询官方文档或其他技术博客解决遇到的问题 资源链接 # https://bhpan.buaa.edu.cn:443/link/3A508B02D5CE20902AE2983009CE5D1B
Valid Until: 2023-07-15 23:59
实验指南 # 阅读资源中提供的Maven资料，了解Maven的基础内容，如果你还不了解基础的java依赖引入，可以先行学习，再来学习Maven 学习《Springboot基础》与视频资料，自行创建一个基础的Springboot项目并成功运行 学习使用 postman/apifox（可参考官网教程 https://learning.postman.com/docs/getting-started/introduction，或者 https://www.apifox.cn/help/ 不推荐一口气读完，推荐随用随查） 实验作业 # 任务1 # 提供视频中的基础代码(跟视频手打or自己弄明白原理手搓)，并连接自己的本地数据库（需要回忆你的数据库课程知识），并且成功运行，请提供运行截图
任务2（考虑到大多数同学都是初学javaEE，本任务不再强行要求，高手们可以尝试） # 根据注册代码和 session 的处理方式完成登录请求（localhost:8090/login），并使用Postman / ApiFox 测试，请提供运行截图
温馨提示：session 的处理方式 ppt 上所说的是绝对不够用的，这里是为了考验大家能不能通过官网等渠道获取到有用信息 任务3 # 增加个人信息查询功能（localhost:8090/show_info），并使用 Postman/ApiFox 测试（在 body 中返回“name”：“xxx”， “password”： “xxx”），请提供运行截图</description></item><item><title>YAML 小指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/yaml%E5%B0%8F%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/yaml%E5%B0%8F%E6%8C%87%E5%8D%97/</guid><description>YAML 小指南 # YAML是一个类似 XML、JSON 的标记性语言。它强调以数据为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称&amp;quot;一种人性化的数据格式语言&amp;quot;。
&amp;lt;heima&amp;gt; &amp;lt;age&amp;gt;15&amp;lt;/age&amp;gt; &amp;lt;address&amp;gt;Beijing&amp;lt;/address&amp;gt; &amp;lt;/heima&amp;gt; heima: age: 15 address: Beijing YAML的语法比较简单，主要有下面几个：
大小写敏感 使用缩进表示层级关系 缩进不允许使用tab，只允许空格( 低版本限制 ) 缩进的空格数不重要，只要相同层级的元素左对齐即可 &amp;lsquo;#&amp;lsquo;表示注释 YAML支持以下几种数据类型：
纯量：单个的、不可再分的值 对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） # 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期 # 1 布尔类型 c1: true (或者True) # 2 整型 c2: 234 # 3 浮点型 c3: 3.14 # 4 null类型 c4: ~ # 使用~表示null # 5 日期类型 c5: 2018-02-17 # 日期必须使用ISO 8601格式，即yyyy-MM-dd # 6 时间类型 c6: 2018-02-17T15:02:31+08:00 # 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区 # 7 字符串类型 c7: heima # 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 c8: line1 line2 # 字符串过多的情况可以拆成多行，每一行会被转化成一个空格 # 对象 # 形式一(推荐): heima: age: 15 address: Beijing # 形式二(了解): heima: {age: 15,address: Beijing} # 数组 # 形式一(推荐): address: - 顺义 - 昌平 # 形式二(了解): address: [顺义,昌平] 小提示：</description></item></channel></rss>