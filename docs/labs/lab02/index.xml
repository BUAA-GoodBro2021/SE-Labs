<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Lab02 前后端基础Ⅰ on 软件工程基础上机指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/</link><description>Recent content in Lab02 前后端基础Ⅰ on 软件工程基础上机指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/index.xml" rel="self" type="application/rss+xml"/><item><title>前端实验指南(敬请期待...)</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/frontend_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/frontend_index/</guid><description>Lab02 前端基础 # 实验目的 # 了解基础的HTML，CSS，JS语法 练习引入css、js代码 练习处理事件 练习修改页面样式 练习修改页面逻辑 练习使用浏览器控制台 回顾第1次实验课git的使用 资源链接 # 实验指南 # 查看资源链接中的前端入门基础.mp4、前端入门基础.pdf 完成实验作业并于 3.27 日晚 12 点前提交至 软院云平台 实验作业 # 你可以在所给资源的homework文件夹中找到实验文档并填写 本次实验建议使用Live Server拓展，我们可以在项目中将其作为一个服务器实时查看开发的网页或项目效果。
安装拓展后，对index.html右键选择Open with Live Server开启服务。
任务1 # 资源中的homework文件夹给出了一个模仿百度主页的网页（index.html），可是这个网页缺少了 CSS 和 JS 文件，你需要把附件文件夹中的 CSS 和 JS 代码引入到网页中
完成该环节的之后的网页截图
任务2 # 修改附件中的index.js，使得点击搜索按钮后，浏览器会弹窗显示所搜索的内容。但是当搜索框为空的时候，点击搜索按钮后，浏览器会弹窗显示“请输入搜索内容”
搜索框为空的截图
点击后的截图
搜索框有内容的截图
再次点击后的截图
任务3 # 修改index.html，使热榜部分的样式其尽可能与下方相似，相关的图片放在了img文件下，其中把“《你的学号》”换成你真实的学号（例如20370000），如有必要可以注释原有的代码，但不要删除，因为后续的任务还会用到
修改完的网页截图
任务4 # 修改 index.js，使得在点击 ID 为 top-right 的元素之后，会调用 clickLogin 函数
点击前的截图
点击后的截图
任务5 # 点击登录按钮后，似乎用户已经正确地登录，但是页面似乎发生了一些错误。请尝试修改 initUserInfo 函数，使得用户登录后，页面显示依然正常。（使用审查元素分析网页变化）</description></item><item><title>前端示例代码</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Example-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Example-code/</guid><description>HTML 入门 # HTML 使用元素来描述页面 # &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;This is a title. &amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;这是 p 标签，用于包裹一个段落的内容。&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 标签的特性（属性） # &amp;lt;p style=&amp;#34;color:red&amp;#34;&amp;gt;...&amp;lt;/p&amp;gt; 常用的标签（1） body head # &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello HTML!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的标签（2） h1 - h6 # &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello HTML!&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;Hello HTML!&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;Hello HTML!&amp;lt;/h3&amp;gt; &amp;lt;h4&amp;gt;Hello HTML!&amp;lt;/h4&amp;gt; &amp;lt;h5&amp;gt;Hello HTML!&amp;lt;/h5&amp;gt; &amp;lt;h6&amp;gt;Hello HTML!&amp;lt;/h6&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的标签（3） ol ul li # &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;有序列表项目1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;有序列表项目2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;有序列表项目3&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;无序列表项目1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;无序列表项目2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;无序列表项目3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 常用的标签（4） # &amp;lt;a href=&amp;#34;http://www.</description></item><item><title>Django入门篇（敬请期待....）</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Django_door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Django_door/</guid><description>Django 入门篇（敬请期待&amp;hellip;.） # 后端的主要功能是，管理数据库、响应前端的请求。例如用户登录，前端需要携带用户名和密码等信息向后端某个路由发送请求，后端则根据用户名查找数据库，验证密码是否正确，并携带结果响应前端。 Django 是一个由 Python 编写的高级 Web 框架，使用框架进行 Web 开发，能避免重复造轮子，而专注于应用程序的业务逻辑。
环境配置 # 我们可以考虑一个小的问题，现在有不同的项目需要在同一个服务器上运行，项目一需要 Python &amp;gt;= 3.8 的环境，因为其中有一个核心的算法模型只支持 3.8 及其以上的 Python 版本，而项目二需要 Python &amp;lt;= 3.7 的环境，因为其中有一个拓展包并没有随着 Python 版本的更新而进行维护，导致 Python 3.7 及其以上的环境不支持该拓展包的使用，那么我们该怎么处理呢。一个很自然的想法就是，我们对于不同的项目，单独给其配置环境就可以了，将两个项目的环境区别开来，互不影响，这样就可以在同一个服务器上进行不同项目的部署了。
给不同项目单独配置的环境叫做虚拟环境，管理虚拟环境的工具叫做 Conda，Conda的种类有很多，比如Anaconda，miniconda等等，上面这两个 Conda 是常用的 Conda，二者区别在于Anaconda自带了很多数据科学计算的包（该虚拟环境已经安装好了比如 NumPy，Panda等包），而miniconda则是一个空的环境。
相比于直接安装 Python 某个版本，我们更推荐安装 Anaconda 管理虚拟环境（miniconda 也可以，这里以 Anaconda 作为例子）。Python 项目的版本和依赖各有千秋，而使用 Anaconda 能针对项目建立虚拟环境，互不干扰且便于管理。
Anaconda下载地址：
官网： https://www.anaconda.com/ 清华镜像： https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/（选择最新版本即可） 安装步骤中注意勾选添加至环境变量中 安装 Anaconda 后，使用 conda 指令新建一个虚拟环境，用于开发 Django 项目：
conda create --name django python=3.8 # 虚拟环境名为django，python版本指定3.8 进入 django 虚拟环境：</description></item></channel></rss>