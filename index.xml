<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>软件工程上机指南 on 软件工程基础上机指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/</link><description>Recent content in 软件工程上机指南 on 软件工程基础上机指南</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://BUAA-GoodBro2021.github.io/SE-Labs/index.xml" rel="self" type="application/rss+xml"/><item><title>Git 简易教程</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git/</guid><description>Git 指南 # 本教程涉及命令行指令说明时，[] 表示该参数为可选，&amp;lt;&amp;gt; 仅说明参数意义，需根据实际来定义 Git 简介 # Git 是一个开源的分布式版本控制系统，用于敏捷高效地处理或大或小的项目。利用 git，可以在本地很好地控制项目版本，让项目有条不紊地进行，编写代码错误还能通过回退进行纠正；通过提交、拉取、推送等操作，与队友或同事参与远程共同开发。
为什么我们需要 git？试想一下，在面对一个万行级别甚至更高级别的项目时，单个程序员已经很难完成和掌控整个项目。此时扮演对项目进行开发和维护角色的往往是一个多人团队。事实上，无论是开发阶段还是维护阶段，每个人所熟悉的也只是自己负责的那部分代码而已。在团队开发中，每个开发者都在自己负责的部分编写了不同的代码，很多情况下甚至在同一个文件做了不同的修改。如何把大家的汗水与智慧的结晶进行版本管理，综合为一个完整且稳定的项目？
在过去，需要分配专门的人员完成这种统筹兼顾的工作。但是现在，以 git 为代表的分布式版本控制系统出现了。它可以方便的进行分支管理，将不同的开发内容一键合并。也可以让开发者看到项目的每一条分支的提交记录，以获知自己和主分支之间是否存在进度差异；它可以进行强大的版本管理，当开发者发现由于自己的失误导致项目出现了难以弥补的恶性 bug，或者是文件管理出现重大事故，git 支持开发者以 commit 为“锚点”进行版本回退，解决旧版本中的隐患或者丢掉新版本的失误；它可以提供图形化的冲突页面，以方便开发者了解自己修改的文件和希望合并、拉取的分支中对应的文件在哪里出现了有待商榷的差异……总之，多人协作的任何代码项目，都离不开以 git 为代表的分布式版本控制系统。而即将陪伴我们数个学期的软件工程课程，其项目也将建立在 git 之上。
分布式版本控制系统 在分布式版本控制系统中，系统保存的不是文件变化的差量，而是文件的快照，即把文件的整体复制下来保存，而不关心具体的变化内容。其次，最重要的是该控制系统是分布式的，开发者从中央服务器拷贝下来代码时，拷贝的是一个完整的版本库，包括历史纪录，提交记录等，这样即使某一台机器宕机也能找到文件的完整备份。
Git 安装 # Windows 安装包下载地址： https://gitforwindows.org/
官网慢，可以用国内的镜像： https://npm.taobao.org/mirrors/git-for-windows/
完成安装之后，就可以在 cmd 或 powershell 等命令行工具使用 git 工具了。一般情况下，在某个文件夹点击右键，你可以看到 Git Bash Here，通过这个也可以打开 Git 工具。
MacOS 在 Mac 平台上安装 Git 最容易的当属使用图形化的 Git 安装工具。
下载地址为： http://sourceforge.net/projects/git-osx-installer/
Linux 尝试在终端输入 git，看看系统有没有安装；没有的话输入以下命令安装：
sudo apt-get install git Git 配置 # Git 提供了一个叫做 git config 的工具，用于配置或读取相应的工作环境变量。这些环境变量决定了 Git 在各个环节的管理员信息和使用方式，存放于 /etc/gitconfig (所有用户生效 –system) 或 ~/.</description></item><item><title>Git 指令全集</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git_command/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab01/git_command/</guid><description>Git 指令全集 # 仓库 # # 在当前目录新建一个Git代码库 $ git init # 新建一个目录，将其初始化为Git代码库 $ git init &amp;lt;project-name&amp;gt; # 下载一个项目和它的整个代码历史 $ git clone &amp;lt;url&amp;gt; 配置 # # 显示当前的Git配置 $ git config --list # 编辑Git配置文件 $ git config -e &amp;lt;--global&amp;gt; # 设置提交代码时的用户信息 $ git config &amp;lt;--global&amp;gt; user.name &amp;#34;&amp;lt;name&amp;gt;&amp;#34; $ git config &amp;lt;--global&amp;gt; user.email &amp;#34;&amp;lt;email address&amp;gt;&amp;#34; 增加/删除文件 # # 添加指定文件到暂存区 $ git add &amp;lt;file1&amp;gt; &amp;lt;file2&amp;gt; ... # 添加指定目录到暂存区，包括子目录 $ git add &amp;lt;dir&amp;gt; # 添加当前目录的所有文件到暂存区 $ git add .</description></item><item><title>前端实验指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/frontend_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/frontend_index/</guid><description>Lab02 前端基础 # 实验目的 # 了解基础的 HTML，CSS，JS 语法 练习引入 css、js 代码 练习处理事件 练习修改页面样式 练习修改页面逻辑 练习使用浏览器控制台 回顾第 1 次实验课 git 的使用 资源链接 # https://bhpan.buaa.edu.cn:443/link/3A508B02D5CE20902AE2983009CE5D1B
Valid Until: 2023-07-15 23:59
实验指南 # 查看资源链接中的 前端入门基础.mp4、前端入门基础.pdf 学习 JS 可以参考链接中的三本电子书，网页版可以参考 现代 JavaScript 教程 推荐使用 Chrome 浏览器进行开发，调试技巧可以参考 Chrome DevTools 使用技巧 在前端的学习和开发过程中，建议你时常参考 ✨✨MDN Web Docs✨✨，这是前端开发的百科全书 完成实验作业并于 3.25 日晚 12 点前提交至 软院云平台 很多同学认为前端开发就是框架 + 组件库 + 搜索引擎。
熟悉框架语法并从组件库进行 CV 固然可以快速完成需求，但软工一作为一系列软件工程开发的开端，作为助教，我们还是希望同学们能在这几个月的学习过程中打好 JS 和 CSS 的基础，增加自己日后面对复杂需求时的底气，勿以浮沙筑高台。
个人建议在有必要时，可以在假期给自己的 JS 和 CSS 补补钙。这两者的内容都远比想象中要多得多。JS 中的正则和 Java 中有所区别，在表单应用和处理用户输入等地方，熟练正则能够节省很多功夫。可迭代对象的流函数也是批量操作数据的利器。CSS 就更不必多说了，浩如烟海的属性，无数 combo 的小配合和小技巧只有不断练习才能掌握。这里附上一个很有名的 CSS 选择器 练习链接： “餐厅练习” CSS Dinner，动画 Q 萌，讲解翔实，非常推荐学完 CSS 选择器的同学检验自己的学习成果。</description></item><item><title>前端示例代码</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Example-code/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/Example-code/</guid><description>HTML 入门 # HTML 使用元素来描述页面 # &amp;lt;html&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;This is a title. &amp;lt;/h1&amp;gt; &amp;lt;p&amp;gt;这是 p 标签，用于包裹一个段落的内容。&amp;lt;/p&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 标签的特性（属性） # &amp;lt;p style=&amp;#34;color:red&amp;#34;&amp;gt;...&amp;lt;/p&amp;gt; 常用的标签（1） body head # &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello HTML!&amp;lt;/h1&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的标签（2） h1 - h6 # &amp;lt;html&amp;gt; &amp;lt;head&amp;gt;&amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;h1&amp;gt;Hello HTML!&amp;lt;/h1&amp;gt; &amp;lt;h2&amp;gt;Hello HTML!&amp;lt;/h2&amp;gt; &amp;lt;h3&amp;gt;Hello HTML!&amp;lt;/h3&amp;gt; &amp;lt;h4&amp;gt;Hello HTML!&amp;lt;/h4&amp;gt; &amp;lt;h5&amp;gt;Hello HTML!&amp;lt;/h5&amp;gt; &amp;lt;h6&amp;gt;Hello HTML!&amp;lt;/h6&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; 常用的标签（3） ol ul li # &amp;lt;ol&amp;gt; &amp;lt;li&amp;gt;有序列表项目1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;有序列表项目2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;有序列表项目3&amp;lt;/li&amp;gt; &amp;lt;/ol&amp;gt; &amp;lt;ul&amp;gt; &amp;lt;li&amp;gt;无序列表项目1&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;无序列表项目2&amp;lt;/li&amp;gt; &amp;lt;li&amp;gt;无序列表项目3&amp;lt;/li&amp;gt; &amp;lt;/ul&amp;gt; 常用的标签（4） # &amp;lt;a href=&amp;#34;http://www.</description></item><item><title>后端实验指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/backend_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/backend_index/</guid><description>Lab03 后端进阶 # 前请提醒 # 大家目前接触过的 java 大部分属于 javaSE 部分，而后端框架一般属于 javaEE 部分，javaSE 和 javaEE 二者之间的区别还是很大的，而且 SpringBoot 该框架要求的前置知识较多，因为SprintBoot 是 Spring 全家桶的整合，需要了解 Spring，SpringMVC，MyBatis（MyBatis-plus）三件套的基本知识，同时在面对增删改查的复杂逻辑时需要手写 SQL 语句，所以不太适合后端新手同学使用该框架作为后端框架的入门。
因此该后端实验有很多实验是选做（标红的都是选做——高手可以尝试）部分，不太要求同学们完全掌握这门框架，目前只需要根据教学视频对于该框架有一个初步的了解即可。
可以花更多的时间在 Django 上！
实验目的 # 学习使用maven管理配置依赖 了解springboot的基础知识，能够自行创建一个springboot项目 了解基础的分层结构 【高手必须掌握的】锻炼解决问题的能力，通过查询官方文档或其他技术博客解决遇到的问题 资源链接 # https://bhpan.buaa.edu.cn:443/link/3A508B02D5CE20902AE2983009CE5D1B
Valid Until: 2023-07-15 23:59
实验指南 # 阅读资源中提供的Maven资料，了解Maven的基础内容，如果你还不了解基础的java依赖引入，可以先行学习，再来学习Maven 学习《Springboot基础》与视频资料，自行创建一个基础的Springboot项目并成功运行 学习使用 postman/apifox（可参考官网教程 https://learning.postman.com/docs/getting-started/introduction，或者 https://www.apifox.cn/help/ 不推荐一口气读完，推荐随用随查） 实验作业 # 任务1 # 提供视频中的基础代码(跟视频手打or自己弄明白原理手搓)，并连接自己的本地数据库（需要回忆你的数据库课程知识），并且成功运行，请提供运行截图
任务2（考虑到大多数同学都是初学javaEE，本任务不再强行要求，高手们可以尝试） # 根据注册代码和 session 的处理方式完成登录请求（localhost:8090/login），并使用Postman / ApiFox 测试，请提供运行截图
温馨提示：session 的处理方式 ppt 上所说的是绝对不够用的，这里是为了考验大家能不能通过官网等渠道获取到有用信息 任务3 # 增加个人信息查询功能（localhost:8090/show_info），并使用 Postman/ApiFox 测试（在 body 中返回“name”：“xxx”， “password”： “xxx”），请提供运行截图</description></item><item><title>yaml小指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/yaml%E5%B0%8F%E6%8C%87%E5%8D%97/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab03/yaml%E5%B0%8F%E6%8C%87%E5%8D%97/</guid><description>YAML是一个类似 XML、JSON 的标记性语言。它强调以数据为中心，并不是以标识语言为重点。因而YAML本身的定义比较简单，号称&amp;quot;一种人性化的数据格式语言&amp;quot;。
&amp;lt;heima&amp;gt; &amp;lt;age&amp;gt;15&amp;lt;/age&amp;gt; &amp;lt;address&amp;gt;Beijing&amp;lt;/address&amp;gt; &amp;lt;/heima&amp;gt; heima: age: 15 address: Beijing YAML的语法比较简单，主要有下面几个：
大小写敏感 使用缩进表示层级关系 缩进不允许使用tab，只允许空格( 低版本限制 ) 缩进的空格数不重要，只要相同层级的元素左对齐即可 &amp;lsquo;#&amp;lsquo;表示注释 YAML支持以下几种数据类型：
纯量：单个的、不可再分的值 对象：键值对的集合，又称为映射（mapping）/ 哈希（hash） / 字典（dictionary） 数组：一组按次序排列的值，又称为序列（sequence） / 列表（list） # 纯量, 就是指的一个简单的值，字符串、布尔值、整数、浮点数、Null、时间、日期 # 1 布尔类型 c1: true (或者True) # 2 整型 c2: 234 # 3 浮点型 c3: 3.14 # 4 null类型 c4: ~ # 使用~表示null # 5 日期类型 c5: 2018-02-17 # 日期必须使用ISO 8601格式，即yyyy-MM-dd # 6 时间类型 c6: 2018-02-17T15:02:31+08:00 # 时间使用ISO 8601格式，时间和日期之间使用T连接，最后使用+代表时区 # 7 字符串类型 c7: heima # 简单写法，直接写值 , 如果字符串中间有特殊字符，必须使用双引号或者单引号包裹 c8: line1 line2 # 字符串过多的情况可以拆成多行，每一行会被转化成一个空格 # 对象 # 形式一(推荐): heima: age: 15 address: Beijing # 形式二(了解): heima: {age: 15,address: Beijing} # 数组 # 形式一(推荐): address: - 顺义 - 昌平 # 形式二(了解): address: [顺义,昌平] 小提示：</description></item><item><title>后端实验指南</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/backend_index/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/backend_index/</guid><description>Lab02 后端基础 # 实验目的 # 掌握 Python 基础代码 了解 Django 框架，学习使用框架编写几个简单 API 学习使用 Postman/ApiFox 请求工具测试后端 API 资源链接 # https://bhpan.buaa.edu.cn:443/link/3A508B02D5CE20902AE2983009CE5D1B
Valid Until: 2023-07-15 23:59
实验指南 # 观看上述云盘链接中 Lab02/后端Django 目录下的视频教程 文字教程可查阅 Django入门教程 和 Django入土教程 完成实验作业并于 3.25 日晚 12 点前提交至 软院云平台 实验作业 # 本次作业在提供的模板项目代码上修改完成，也可以自己新建项目，体验 Django 初始化项目的过程。
任务一 完善注册 # 请完善注册的API，实现以下功能：
增加用户名格式检测，保证用户名由英文或数字组成：当请求用户名含其它字符时，返回 errno 为 1003，msg 为 用户名不合法； 增加用户名检测，保证用户名不重复：当数据库里存在请求携带的用户名时，返回 errno 为 1004，msg 为 用户名已存在； 增加密码检测，保证密码由8~18位字符组成，且需同时包含英文和数字：当密码不合法时，返回 errno 为 1005，msg 为 密码不合法。 注册API返回信息汇总：
情况 errno msg 成功 0 注册成功 请求方式不为POST 1001 请求方式错误 两次输入的密码不同 1002 两次输入的密码不同 用户名含除英文和数字以外的字符 1003 用户名不合法 用户名重复 1004 用户名已存在 密码不符合规则 1005 密码不合法 返回样例：</description></item><item><title>Django入门篇</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/django_door/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/django_door/</guid><description>Django 入门篇（快速入门，立刻上手！） # 后端的主要功能是，管理数据库、响应前端的请求。例如用户登录，前端需要携带用户名和密码等信息向后端某个路由发送请求，后端则根据用户名查找数据库，验证密码是否正确，并携带结果响应前端。
后端处理前端HTTP请求的流程可以概括为如下：用户点击某个前端部件，前端通过指定请求路由向后端发送请求内容，后端收到请求之后，寻找匹配该请求路由对应的视图函数，在视图函数中配合数据库对发送而来的请求内容进行处理，然后再向前端发送请求处理的结果信息，前端收到结果信息后对用户进行反馈
Django 是一个由 Python 编写的高级 Web 框架，使用框架进行 Web 开发，能避免重复造轮子，而专注于应用程序的业务逻辑。
环境配置 # 我们可以考虑一个小的问题，现在有不同的项目需要在同一个服务器上运行，项目一需要 Python &amp;gt;= 3.8 的环境，因为其中有一个核心的算法模型只支持 3.8 及其以上的 Python 版本，而项目二需要 Python &amp;lt;= 3.7 的环境，因为其中有一个拓展包并没有随着 Python 版本的更新而进行维护，导致 Python 3.7 及其以上的环境不支持该拓展包的使用，那么我们该怎么处理呢。一个很自然的想法就是，我们对于不同的项目，单独给其配置环境就可以了，将两个项目的环境区别开来，互不影响，这样就可以在同一个服务器上进行不同项目的部署了。
给不同项目单独配置的环境叫做虚拟环境，管理虚拟环境的工具叫做 Conda，Conda的种类有很多，比如Anaconda，miniconda等等，上面这两个 Conda 是常用的 Conda，二者区别在于Anaconda自带了很多数据科学计算的包（该虚拟环境已经安装好了比如 NumPy，Panda等包），而miniconda则是一个空的环境。
相比于直接安装 Python 某个版本，我们更推荐安装 Anaconda 管理虚拟环境（miniconda 也可以，这里以 Anaconda 作为例子）。Python 项目的版本和依赖各有千秋，而使用 Anaconda 能针对项目建立虚拟环境，互不干扰且便于管理。
Anaconda下载地址：
官网： https://www.anaconda.com/ 清华镜像： https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/（选择最新版本即可） 安装步骤中注意勾选添加至环境变量中 安装 Anaconda 后，使用 conda 指令新建一个虚拟环境，用于开发 Django 项目：
conda create --name django python=3.9 # 虚拟环境名为django，python版本指定3.</description></item><item><title>Django入土篇</title><link>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/django_earth/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://BUAA-GoodBro2021.github.io/SE-Labs/docs/labs/lab02/django_earth/</guid><description>Django 入土篇 # Django 从入门到入土 # Liujiang Blog：https://www.liujiangblog.com/course/django/84
Get Liujiang Blog Marvolo Djangobook（强力推荐，必须得看！19级dalao专门写的教程，里面教了如何购买云服务器，云数据库，使用 Datagrip 等进阶知识）：https://super-buaa-2021.github.io/Djangobook/
Get Djangobook Bilibili Video（强力推荐，如果有时间可以看一看，看到 P79集，足以出色的完成软工一，小学期）：https://www.bilibili.com/video/BV1b5411c7Sa/
Get Bilibili Video Django 指令或代码指示 # 项目指令 # django-admin startproject &amp;lt;project_name&amp;gt; # 创建项目 python manage.py startapp &amp;lt;app_name&amp;gt; # 创建APP python manage.py runserver # 本地运行 python manage.py makemigrations # 生成迁移文件 python manage.py migrate # 迁移数据库模型 Django Models # Django 的 Model 数据类型 # 数据类型 说明 AutoField 根据 ID 自增长的 IntegerField 字段，通常用于主键ID IntegerField 32位整数，可自定义选项 BooleanField 布尔值(True/False)字段 CharField 字符串字段，对小字符串和大字符串都适用；对于大量文本建议使用TextField。必须参数：max_length（字段的最大字符数） DateField 利用 Python 的 datetime.</description></item></channel></rss>